{
  "language": "Solidity",
  "sources": {
    "contracts/MusicShop.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ncontract MusicShop {\r\n    struct Album {\r\n        uint index;\r\n        string uid;\r\n        string title;\r\n        uint price;\r\n        uint quantity;\r\n    }\r\n\r\n    struct Order {\r\n        uint orderId;\r\n        string albumUid;\r\n        address customer;\r\n        uint orderAt;\r\n        OrderStatus status;\r\n    }\r\n\r\n    enum OrderStatus { Paid, Delivered }\r\n\r\n    Album[] public albums;\r\n    Order[] public orders;\r\n\r\n    uint public currentIndex;\r\n    uint public currentOrderId;\r\n\r\n    address public owner;\r\n\r\n    event AlbumBought(string indexed uid, string rawUid, address indexed customer, uint timestamp);\r\n\r\n    event OrderDelivered(string indexed albumUid, address indexed customer);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not an owner\");\r\n        _;\r\n    }\r\n\r\n    function addAlbuym(string calldata uid, string calldata title, uint price, uint quantity) external onlyOwner {\r\n        albums.push(Album({\r\n            index: currentIndex,\r\n            uid: uid,\r\n            title: title,\r\n            price: price,\r\n            quantity: quantity\r\n        }));\r\n\r\n        currentIndex++;\r\n    }\r\n\r\n    function buy(uint _index) external payable {\r\n        Album storage albumToBuy = albums[_index];\r\n        require(msg.value == albumToBuy.price, \"invalid price\");\r\n        require(albumToBuy.quantity > 0, \"out of stock!\");\r\n        \r\n        albumToBuy.quantity--;\r\n\r\n        orders.push(Order({\r\n            orderId: currentOrderId,\r\n            albumUid: albumToBuy.uid,\r\n            customer: msg.sender,\r\n            orderAt: block.timestamp,\r\n            status: OrderStatus.Paid\r\n        }));\r\n\r\n        currentOrderId++;\r\n\r\n        emit AlbumBought(albumToBuy.uid, albumToBuy.uid, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function delivered(uint _index) external onlyOwner {\r\n        Order storage currentOrder = orders[_index];\r\n\r\n        require(currentOrder.status != OrderStatus.Delivered, \"Invalid status\");\r\n\r\n        currentOrder.status = OrderStatus.Delivered;\r\n\r\n        emit OrderDelivered(currentOrder.albumUid, currentOrder.customer);\r\n    }\r\n\r\n\r\n    function allAlbums() external view returns(Album[] memory) {\r\n        Album[] memory albumsList = new Album[](albums.length);\r\n\r\n        for(uint i = 0; i < albums.length; i++) {\r\n            albumsList[i] = albums[i];\r\n        }\r\n\r\n        return albumsList;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}